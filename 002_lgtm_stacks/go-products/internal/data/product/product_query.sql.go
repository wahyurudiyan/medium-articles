// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: product_query.sql

package product

import (
	"context"
)

type CreateProductsParams struct {
	Sku      string
	Name     string
	Quantity int64
	Price    int64
}

const getProductByID = `-- name: GetProductByID :one
SELECT id, sku, name, quantity, price, created_at, updated_at, deleted_at FROM products
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetProductByID(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRow(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Sku,
		&i.Name,
		&i.Quantity,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getProductBySKU = `-- name: GetProductBySKU :one
SELECT id, sku, name, quantity, price, created_at, updated_at, deleted_at FROM products
WHERE sku = $1 AND deleted_at IS NULL
`

func (q *Queries) GetProductBySKU(ctx context.Context, sku string) (Product, error) {
	row := q.db.QueryRow(ctx, getProductBySKU, sku)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Sku,
		&i.Name,
		&i.Quantity,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT id, sku, name, quantity, price, created_at, updated_at, deleted_at FROM products
WHERE deleted_at IS NULL
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListProductsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Sku,
			&i.Name,
			&i.Quantity,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteProduct = `-- name: SoftDeleteProduct :one
UPDATE products
SET
  deleted_at = timezone('utc', now()),
  updated_at = timezone('utc', now())
WHERE sku = $1 AND deleted_at IS NULL
RETURNING id, sku
`

type SoftDeleteProductRow struct {
	ID  int64
	Sku string
}

func (q *Queries) SoftDeleteProduct(ctx context.Context, sku string) (SoftDeleteProductRow, error) {
	row := q.db.QueryRow(ctx, softDeleteProduct, sku)
	var i SoftDeleteProductRow
	err := row.Scan(&i.ID, &i.Sku)
	return i, err
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET
  name = $1,
  quantity = $2,
  price = $3,
  updated_at = timezone('utc', now())
WHERE sku = $4 AND deleted_at IS NULL
RETURNING id, sku, name, quantity, price, created_at, updated_at, deleted_at
`

type UpdateProductParams struct {
	Name     string
	Quantity int64
	Price    int64
	Sku      string
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct,
		arg.Name,
		arg.Quantity,
		arg.Price,
		arg.Sku,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Sku,
		&i.Name,
		&i.Quantity,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
